import requests
import random
import hashlib
import threading
import time
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from diffusers import StableDiffusionPipeline
import torch
import schedule
from instapy import InstaPy
from transformers import pipeline

# Telegram bot token
TOKEN = '7079921472:AAHcrHtlpUpRYW3fuQJk3Ha45dX15yPQDGY'

# Instagram credentials -- use cautiously
INSTA_USERNAME = 'your'
INSTA_PASSWORD = 'you'

# Raw GitHub URL to fetch BIP39 word list 
BIP39_RAW_URL = "https://raw.githubusercontent.com/bitcoin/bips/master/bip-0039/english.txt"

# Load Stable Diffusion pipeline (change model_id for other versions)
model_id = "CompVis/stable-diffusion-v1-4"
print("Loading Stable Diffusion model...")
pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
pipe = pipe.to("cuda" if torch.cuda.is_available() else "cpu")
print("Model loaded.")

# Load prompt expansion model (small GPT-2 for demonstration)
prompt_generator = pipeline('text-generation', model='gpt2')

# Download BIP39 wordlist from GitHub
def get_bip39_wordlist():
    response = requests.get(BIP39_RAW_URL)
    response.raise_for_status()
    words = response.text.splitlines()
    return words

# Fetch wordlist once at start
print("Fetching BIP39 wordlist...")
bip39_wordlist = get_bip39_wordlist()
print(f"Loaded {len(bip39_wordlist)} words.")

# Function to generate a random abstract art image
def generate_random_abstract_art():
    prompts = [
        "abstract swirling colors in a cosmic void",
        "creative fractal patterns with vibrant hues",
        "surreal dreamscape with floating geometric shapes",
        "abstract expressionist painting in bold strokes"
    ]
    prompt = random.choice(prompts)
    image = pipe(prompt).images[0]
    image_path = 'generated_art.png'
    image.save(image_path)
    return image_path, prompt

# Generate prompts from mnemonic phrases using prompt generator
def expand_mnemonic_to_prompts(mnemonic_phrase, num_images=5):
    base_prompt = "Generate creative abstract art prompts based on these words: " + mnemonic_phrase
    generated = prompt_generator(base_prompt, max_length=50, num_return_sequences=num_images)
    prompts = [gen['generated_text'].split(":")[-1].strip() + " in abstract style" for gen in generated]
    return prompts

# Generate batch of images from multiple prompts
def generate_batch_images(prompts):
    images = []
    for i, prompt in enumerate(prompts):
        image = pipe(prompt).images[0]
        image_path = f'generated_art_{i}.png'
        image.save(image_path)
        images.append((image_path, prompt))
    return images

# Telegram command: /generate - generate one random abstract art
async def generate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    image_path, prompt = generate_random_abstract_art()
    await update.message.reply_photo(photo=open(image_path, 'rb'), caption=f"Generated: {prompt}")
    await update.message.reply_text("Image generated! You can use /post to post it to Instagram.")

# Telegram command: /mnemonic <phrase> - generate multiple images from mnemonic phrase
async def mnemonic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("Please provide a mnemonic phrase, e.g., /mnemonic apple storm galaxy")
        return
    phrase = " ".join(context.args)
    await update.message.reply_text(f"Generating batch from mnemonic phrase: {phrase}")

    prompts = expand_mnemonic_to_prompts(phrase, num_images=5)
    images = generate_batch_images(prompts)

    for image_path, prompt in images:
        await update.message.reply_photo(photo=open(image_path, 'rb'), caption=f"Generated: {prompt}")

    await update.message.reply_text(f"Batch complete! {len(images)} images generated.")

# Post last generated image(s) to Instagram
def post_to_instagram():
    # For example: post the last generated single image or one from batch
    image_path = 'generated_art.png'  # you can extend logic to post batch images
    caption = "Random abstract art generated by AI #abstract #art #AI"

    session = InstaPy(username=INSTA_USERNAME, password=INSTA_PASSWORD)
    session.login()
    session.upload_photo(image_path, caption=caption)
    session.end()

# Telegram command: /post - post last generated image to Instagram
async def post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Posting the latest generated image to Instagram...")
    try:
        post_to_instagram()
        await update.message.reply_text("Image posted to Instagram successfully!")
    except Exception as e:
        await update.message.reply_text(f"Failed to post image: {e}")

# Scheduled job to post daily
def schedule_posts():
    schedule.every(24).hours.do(post_to_instagram)
    while True:
        schedule.run_pending()
        time.sleep(60)

# Main bot initialization
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("generate", generate))
    app.add_handler(CommandHandler("mnemonic", mnemonic))
    app.add_handler(CommandHandler("post", post))
    
    # Run scheduled posting in background thread
    threading.Thread(target=schedule_posts, daemon=True).start()

    print("Telegram bot started...")
    app.run_polling()

if __name__ == "__main__":
    main()
